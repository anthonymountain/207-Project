package interface_adapter.spotifyauth;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.stereotype.Component;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

@Component
public class SpotifyApiClient {

    private final HttpClient httpClient;

    public SpotifyApiClient() {
        this.httpClient = HttpClient.newHttpClient();
    }

    public String getRecommendations(String accessToken, String seedArtists, String seedGenres, String seedTracks) {
        try {
            final URI uri = new URI(String.format(
                    "https://api.spotify.com/v1/recommendations?seed_artists=%s&seed_genres=%s&seed_tracks=%s",
                    seedArtists, seedGenres, seedTracks));

            final HttpRequest request = HttpRequest.newBuilder()
                    .uri(uri)
                    .header("Authorization", "Bearer " + accessToken)
                    .GET()
                    .build();

            final HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            return response.body();
        } catch (Exception e) {
            throw new RuntimeException("Failed to get recommendations", e);
        }
    }

    public String createPlaylist(String accessToken, String userId, String playlistName) {
        try {
            final URI uri = new URI(String.format("https://api.spotify.com/v1/users/%s/playlists", userId));

            final JSONObject payload = new JSONObject();
            payload.put("name", playlistName);
            payload.put("description", "Generated by the app");
            payload.put("public", false);

            final HttpRequest request = HttpRequest.newBuilder()
                    .uri(uri)
                    .header("Authorization", "Bearer " + accessToken)
                    .header("Content-Type", "application/json")
                    .POST(HttpRequest.BodyPublishers.ofString(payload.toString()))
                    .build();

            final HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            return response.body();
        } catch (Exception e) {
            throw new RuntimeException("Failed to create playlist", e);
        }
    }

    public void addTracksToPlaylist(String accessToken, String playlistId, JSONArray trackUris) {
        try {
            final URI uri = new URI(String.format("https://api.spotify.com/v1/playlists/%s/tracks", playlistId));

            final JSONObject payload = new JSONObject();
            payload.put("uris", trackUris);

            final HttpRequest request = HttpRequest.newBuilder()
                    .uri(uri)
                    .header("Authorization", "Bearer " + accessToken)
                    .header("Content-Type", "application/json")
                    .POST(HttpRequest.BodyPublishers.ofString(payload.toString()))
                    .build();

            httpClient.send(request, HttpResponse.BodyHandlers.ofString());
        } catch (Exception e) {
            throw new RuntimeException("Failed to add tracks to playlist", e);
        }
    }
}